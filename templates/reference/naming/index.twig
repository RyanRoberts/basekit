{% extends "_layout.twig" %}

{% set title = "Naming Conventions" %}
{% set slug = "naming" %}

{% block content %}
{% include 'reference/_partials/_quick-nav.twig' %}

  <div class="bg-white">
    <section class="site-container  pad">
      <h2 data-bk-layout="pad:rbl" class="font-xl">{{ title }}</h2>

      <div data-bk-layout="lap:8" data-bk-links="primary fade underline" class="rte">
        <p class="alert alert--simple">WIP: IGNORE FOR NOW</p>

        <p>BaseKit makes use of two primary types of class; the utility class and the BEM class.</p>

        <p>Utility classes aim to be reuseable and single purpose, unlike BEM classes they should not have sub elements but they can have modifiers.</p>

        <p>BEM classes are most likely to be used in unique project modules or components and not within the core CSS files. If a component of the sites lends well to the Block Element Modifier convention (such as tabbed content) then you're advised to use this.</p>

        <p>In brief, when creating classes take the following approach:</p>

        <ol>
          <li>Describe the <em>thing</em> you're creating or doing: <code>.site-logo</code></li>
          <li>If the thing has different states do that via a modifier to the class: <code>.site-logo<span class="color-secondary">--inverted</span></code></li>
          <li>If it has elements then make use of the <a href="http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/">BEM method</a>.</li>
          <li>Hyphenate words and names within classes. Don't use camelCase or under_scores (unless it's a BEM element of course)</li>
          <li>Aim for single purposes utility classes first, BEM second, project specific last</li>
          <li>Do not worry about using lots of classes in your HTML</li>
          <li>Do not worry about describing your content using classes, this is the purpose of HTML</li>
        </ol>
      </div>
    </section>
  </div>

{% include 'reference/_partials/_pagination.twig' %}

{% endblock %}