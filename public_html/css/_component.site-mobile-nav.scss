@if $nav-mobile {

  // Disabled the toggler button by default, we don't want it on large screens.
  .#{$nav-mobile-name}-toggle { display: none; }

  // Typically we only want the nav to be responsive at small screen sizes. In
  // set.nav.scss you'll want to define when the MQ stops showing.
  @include mq($until: $nav-mobile-breakpoint) {

    // In set.nav.scss the class name is defined, make sure it matches the
    // javascript 'navClass' option otherwise things won't work.
    .#{$nav-mobile-name} {
      .js-has-#{$nav-mobile-name} & {
        // Hide by default. This CSS is the same as the hide utility class.
        clip: rect(0 0 0 0);
        position: absolute;
        width: 1px;
        height: 1px;
        padding: 0;
        margin: -1px;
        overflow: hidden;
        border: 0;
      }

      .js-has-#{$nav-mobile-name}-active & {
        // Remove clipping.
        clip: auto;
        @if $nav-mobile-anim-speed {
          // Set the animate.css duration speed.
          animation-duration: $nav-mobile-anim-speed;
        }
        // Fix the position to the viewport so it won't scroll.
        position: fixed!important;
        // Fit it to the viewport dimensions.
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        // Define the z-index via set.layout.scss
        z-index: z(mobile-nav);
        // Override the hide CSS width and height.
        width: 100%;
        min-height: 100%;
        //  Use the set.nav.scss background color
        background: $nav-mobile-background;
      }

      // Nav inner content wrapper, whether it's a UL or other content.
      &__content {
        // Setup some basic padding, I tend to give the bottom more padding to
        // account for UI in mobile browsers.
        padding: $nav-mobile-padding;
        // Fit it within the overlay container.
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        // Make sure the height is definitely 100%.
        height: 100%;
        // Make sure users can scroll if the nav is taller than the container.
        overflow-y: scroll!important;
        // Make sure it has nice smooth scrolling on iOS.
        -webkit-overflow-scrolling: touch!important;
        overflow-scrolling: touch;
      }
    }



    .#{$nav-mobile-name}-toggle {

      display: block;
      // Position at the top, we don't want this 'fixed' just yet.
      position: absolute;
      @include rem(top, px($margin));
      @include rem(right, px($margin));
      z-index: z(mobile-nav-toggle);

      // Define the toggler dimensions.
      @include rem(width, $nav-mobile-hit-area);
      @include rem(height, $nav-mobile-hit-area);
      @if $nav-mobile-toggle-background {
        background-color: $nav-mobile-toggle-background;
      }

      // Prevent wonkiness in iOS.
      -webkit-tap-highlight-color: rgba(0,0,0,0);
      -webkit-touch-callout: none;
      user-select: none;

      .burger-bars {
        position: absolute;
        @include rem(top, $nav-mobile-burger-bar-center);
        @include rem(width, $nav-mobile-hit-area);
        @include rem(height, $nav-mobile-burger-bar);
        background-color: $nav-mobile-toggle-bar-bg;
        transition: background-color $nav-mobile-burger-bar-transition-speed $nav-mobile-burger-bar-transition-delay;
        @if $nav-mobile-burger-bar-border-radius {
          border-radius: $nav-mobile-burger-bar-border-radius;
        }

        // Hide text. Same as hide-text utility class.
        display: block;
        text-align: left;
        text-indent: -9999px;
        direction: ltr;

        &:before,
        &:after {
          content: "";
          display: block;
          position: absolute;
          top: $nav-mobile-burger-bar * 2;
          @include rem(height, $nav-mobile-burger-bar);
          width: 100%;
          background-color: $nav-mobile-toggle-bar-bg;
          transform-origin: 50% 50%;
          transition:
            top $nav-mobile-burger-bar-transition-speed $nav-mobile-burger-bar-transition-delay ease-in,
            transform $nav-mobile-burger-bar-transition-speed ease-in;
          @if $nav-mobile-burger-bar-border-radius {
            border-radius: $nav-mobile-burger-bar-border-radius;
          }
        }
        &:after {
          top: -$nav-mobile-burger-bar * 2;
        }
      }
    }

    .js-has-#{$nav-mobile-name}-active {

      .#{$nav-mobile-name}-toggle {
        // Fix the toggler 'hamburger' button in position while the nav is open.
        position: fixed;

        .burger-bars {
          // We don't want the middle bar to be visible when the x is formed so
          // make it invisible.
          background-color: transparent;
          transition: background-color $nav-mobile-burger-bar-transition-speed 0s;

          &:before,
          &:after {
            transform: rotate(45deg);
            top: 0;
            transition:
              top $nav-mobile-burger-bar-transition-speed ease-out,
              transform $nav-mobile-burger-bar-transition-speed $nav-mobile-burger-bar-transition-delay ease-out;
          }
          &:after {
            transform: rotate(-45deg);
          }
        }

      }

      // Prevent site body from scrolling when the nav is open.
      body {
        overflow: hidden;
      }
    }

  } // MQ closing bracket
}
