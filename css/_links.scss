// Link Style Utility
// NOTE: This is currently an data attribute and may change back to a class in the near future.
  // —————————————————————————————————————————————————————————————————————————————
  // Links in BaseKit are unstyled by default in order to avoid conflict between UI links and user content generated links, and this utility scopes user generated content links to avoid such conficts and specificity problems brought on by the need to unstyle previous styles.
  //
  // 1.
  // In addition to above this has been converted from a utility class to a data attribute to provide more precise scoping, context and concise use.
  //
  // Previously the utility class may have been used as such:
  // `class="set-links set-links--on-dark set-links--underline"`
  //
  // With the data attribute:
  // `data-bk-links="light underline"`
  //
  // To style links simply, you would have done:
  // `class="set-links"`
  //
  // Now you would only use the data attribute:
  // `data-bk-links`
  //
  // 2.
  // To change the data attribute name, edit the $bkln value in the link mixin
  //
  // 3.
  // Comment out anything you don't need
  //
  // 4.
  // The original link class has been trained at the end of this file in case you want to switch back

// Use this group to setup your desired link color styles, beyond this group you will find various configation utilities that can be used to apply various states and styles to links

// We do not want these styles to apply to the .btn link style, so it is excluded.
a:not(.btn) {

  // Link style used on white backgrounds, you'll want to combine this with `dim`
  [data-bk-links~="white"] & {
    color: white;

    &:focus, &:hover {
      color: white;
    }
  }

  // Link style based on the primary brand colour
  [data-bk-links~="primary"] & {
    color: color(primary);

    &:focus, &:hover {
      color: color(secondary);
    }
  }

  // Link style based on the secondary brand colour
  [data-bk-links~="secondary"] & {
    color: color(secondary);

    &:focus, &:hover {
      color: color(primary);
    }
  }

  // Link style used on white backgrounds, you'll want to combine this with `dim`
  [data-bk-links~="inherit"] & {
    color: inherit;
  }


  // OK so the following config utilities too but we don't want them applied to buttons either
  //
  // Give the links an underline, notice this uses *= so that the styles also apply to the following "-hover" version
  [data-bk-links*="underline"] & {
    text-decoration: underline;
    text-decoration-skip: ink;
  }
  // Switch things around so that underline is on hover
  [data-bk-links~="underline-hover"] & {
    text-decoration-color: transparent;

    &:hover,
    &:focus {
      text-decoration-color: currentColor;
    }
  }
  // Underline only on the intitial state
  [data-bk-links~="underline-initial"] & {
    text-decoration-color: currentColor;

    &:hover,
    &:focus {
      text-decoration-color: transparent;
    }
  }
  // Force underline text off if required (e.g. the link is inside a container with underline enabled but you want this specific one without an underline)
  [data-bk-links~="no-underline"] & {
    text-decoration: none;
  }

  // Fade transition link hover/focus. Could use all but to avoid bugginess we're targetting three common link style properties
  [data-bk-links~="fade"] & {
    transition:
      color $speed-slow,
      opacity $speed-slow,
      text-decoration $speed-slow;

    &:focus,
    &:hover {
      transition-duration: $speed-normal;
    }
  }

  // Apply a subtle dimming of the link, best used with white text on a dark background where it's had to make use of an alternative hover color
  [data-bk-links~="dim"] & {
    opacity: 0.6;

    &:focus,
    &:hover {
      opacity: 1;
    }
  }
}

// Oh shiii… a class. Aye.
// Remove the :focus outline on links
.no-outline {
  &,
  a {
    outline: 0;
  }
}