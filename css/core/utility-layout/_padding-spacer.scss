@if $spacer-css {

  // The minimum and default spacing values, the spacer dimension will not get any smaller than this.
  // NOTE: I've disabled this for now as it's not really necessary
  .#{$spacer-name} {
    // &, &-t {
    //   padding-top: $spacer-size-default / 2;
    // }
    //
    // &, &-b {
    //   padding-bottom: $spacer-size-default / 2;
    // }
    //
    // &-s {
    //   &, &-t {
    //     padding-top: $spacer-size-small / 2;
    //   }
    //
    //   &, &-b {
    //     padding-bottom: $spacer-size-small / 2;
    //   }
    // }
    //
    // &-l {
    //   &, &-t {
    //     padding-top: $spacer-size-large / 2;
    //   }
    //
    //   &, &-b {
    //     padding-bottom: $spacer-size-large / 2;
    //   }
    // }

    // @include mq($spacer-min) {
      &, &-t {
        padding-top: between($spacer-size-default / 3, $spacer-size-default, $spacer-min, $spacer-max);
      }

      &, &-b {
        padding-bottom: between($spacer-size-default / 3, $spacer-size-default, $spacer-min, $spacer-max);
      }

      &-s {
        &, &-t {
          padding-top: between($spacer-size-small / 3, $spacer-size-small, $spacer-min, $spacer-max);
        }

        &, &-b {
          padding-bottom: between($spacer-size-small / 3, $spacer-size-small, $spacer-min, $spacer-max);
        }
      }

      &-l {
        &, &-t {
          padding-top: between($spacer-size-large / 3, $spacer-size-large, $spacer-min, $spacer-max);
        }

        &, &-b {
          padding-bottom: between($spacer-size-large / 3, $spacer-size-large, $spacer-min, $spacer-max);
        }
      }
    // }

    @include mq($spacer-max) {
      &, &-t {
        padding-top: $spacer-size-default;
      }

      &, &-b {
        padding-bottom: $spacer-size-default;
      }

      &-s {
        &, &-t {
          padding-top: $spacer-size-small;
        }

        &, &-b {
          padding-bottom: $spacer-size-small;
        }
      }

      &-l {
        &, &-t {
          padding-top: $spacer-size-large;
        }

        &, &-b {
          padding-bottom: $spacer-size-large;
        }
      }
    }
  }

}


// —————————————————————————————————————————————————————————————————————————————
// ORIGINAL SASS
// —————————————————————————————————————————————————————————————————————————————
//
// @if $spacer-css {
//
//   .#{$spacer-name} {
//
//     // If percentage spacing is set in the compile options use %, otherwise
//     // default to rem sizing
//     &,
//     &-t {
//       padding-top: rem($spacer-size-default / 1.25);
//       padding-top: vw($spacer-size-default, $max-width);
//     }
//
//     &,
//     &-b {
//       padding-bottom: rem($spacer-size-default / 1.25);
//       padding-bottom: vw($spacer-size-default, $max-width);
//     }
//
//     &-s {
//       &,
//       &-t {
//         padding-top: rem($spacer-size-small / 1.5);
//         padding-top: vw($spacer-size-small, $max-width);
//       }
//
//       &,
//       &-b {
//         padding-bottom: rem($spacer-size-small / 1.5);
//         padding-bottom: vw($spacer-size-small, $max-width);
//       }
//     }
//
//     &-l {
//       &,
//       &-t {
//         padding-top: rem($spacer-size-large / 1.75);
//         padding-top: vw($spacer-size-large, $max-width);
//       }
//
//       &,
//       &-b {
//         padding-bottom: rem($spacer-size-large / 1.75);
//         padding-bottom: vw($spacer-size-large, $max-width);
//       }
//     }
//
//     // Set max dimensions to prevent huge spaces at large screen sizes
//     // @include mq($until: $spacer-breakpoint) {
//     //   &,
//     //   &-t {
//     //     padding-top: rem($spacer-size-default / 2);
//     //   }
//     //
//     //   &,
//     //   &-b {
//     //     padding-bottom: rem($spacer-size-default / 2);
//     //   }
//     //
//     //   &-s {
//     //     &,
//     //     &-t {
//     //       padding-top: rem($spacer-size-small / 2);
//     //     }
//     //
//     //     &,
//     //     &-b {
//     //       padding-bottom: rem($spacer-size-small / 2);
//     //     }
//     //   }
//     //
//     //   &-l {
//     //     &,
//     //     &-t {
//     //       padding-top: rem($spacer-size-large / 2);
//     //     }
//     //
//     //     &,
//     //     &-b {
//     //       padding-bottom: rem($spacer-size-large / 2);
//     //     }
//     //   }
//     // }
//
//     // Set max dimensions to prevent huge spaces at large screen sizes
//     @include mq($max-width * 1px) {
//       &,
//       &-t {
//         padding-top: rem($spacer-size-default);
//       }
//
//       &,
//       &-b {
//         padding-bottom: rem($spacer-size-default);
//       }
//
//       &-s {
//         &,
//         &-t {
//           padding-top: rem($spacer-size-small);
//         }
//
//         &,
//         &-b {
//           padding-bottom: rem($spacer-size-small);
//         }
//       }
//
//       &-l {
//         &,
//         &-t {
//           padding-top: rem($spacer-size-large);
//         }
//
//         &,
//         &-b {
//           padding-bottom: rem($spacer-size-large);
//         }
//       }
//     }
//   }
//
// }