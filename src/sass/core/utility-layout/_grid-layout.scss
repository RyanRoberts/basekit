////
/// @author Ryan Roberts
////

/// A simple mixin to ease use of the attribute selector
///
/// @todo EVERYTHING
/// @access private
@mixin attr-module($module, $trait: null) {
  // Target trait such as data-bk="palm:1"
  @if $trait != null {
    [#{$module}~="#{$trait}"] {
      @content;
    }
  }
  // Target the selector itself if no trait, i.e. data-bk=""
  @else {
    [#{$module}] {
      @content;
    }
  }
}


/// Grid cell alignments.
///
/// @todo EVERYTHING
/// @access private
@mixin grid-alignments($ga-value: null) {

  // Apple middle vertical alignment to child grid items (default is: top)
  @include attr-module($bk-grid-name, #{$ga-value}#{"middle"}) {
    > {
      @include attr-module($bk-grid-name) {
        vertical-align: middle;
      }
    }
  }

  // Apple bottom vertical alignment to child grid items (default is: top)
  @include attr-module($bk-grid-name, #{$ga-value}#{"bottom"}) {
    > {
      @include attr-module($bk-grid-name) {
        vertical-align: bottom;
      }
    }
  }

  // Align individual item bottom
  // Using !important to override the above alignments
  @include attr-module($bk-grid-name, #{$ga-value}#{"self-bottom"}) {
    vertical-align: bottom!important;
  }

  // The following three apply horizontal alignments on the container, this will also cascade down to children and text
  @include attr-module($bk-grid-name, #{$ga-value}#{"center"}) {
    text-align: center;
  }
  @include attr-module($bk-grid-name, #{$ga-value}#{"right"}) {
    text-align: right;
  }
  @include attr-module($bk-grid-name, #{$ga-value}#{"left"}) {
    text-align: left;
  }
}




/// Flex box options
///
/// @todo More options
/// @access private
@mixin grid-flex($gf-value: null) {
  @include attr-module($bk-grid-name, #{$gf-value}#{"flex"}) {
    display: flex;
  }

  @include attr-module($bk-grid-name, #{$gf-value}#{"wrap"}) {
    flex-wrap: wrap;
  }

  @include attr-module($bk-grid-name, #{$gf-value}#{"nowrap"}) {
    flex-wrap: nowrap;
  }

  @include attr-module($bk-grid-name, #{$gf-value}#{"col"}) {
    flex-direction: column;
  }

  @include attr-module($bk-grid-name, #{$gf-value}#{"col:rev"}) {
    flex-direction: column-reverse;
  }

  @include attr-module($bk-grid-name, #{$gf-value}#{"row"}) {
    flex-direction: row;
  }

  @include attr-module($bk-grid-name, #{$gf-value}#{"row:rev"}) {
    flex-direction: row-reverse;
  }



  @include attr-module($bk-grid-name, #{$gf-value}#{"j:start"}) {
    justify-content: flex-start;
  }

  @include attr-module($bk-grid-name, #{$gf-value}#{"j:end"}) {
    justify-content: flex-end;
  }

  @include attr-module($bk-grid-name, #{$gf-value}#{"j:center"}) {
    justify-content: center;
  }

  @include attr-module($bk-grid-name, #{$gf-value}#{"j:between"}) {
    justify-content: space-between;
  }

  @include attr-module($bk-grid-name, #{$gf-value}#{"j:around"}) {
    justify-content: space-around;
  }

  @include attr-module($bk-grid-name, #{$gf-value}#{"j:even"}) {
    justify-content: space-evenly;
  }


  @include attr-module($bk-grid-name, #{$gf-value}#{"i:start"}) {
    align-items: flex-start;
  }

  @include attr-module($bk-grid-name, #{$gf-value}#{"i:end"}) {
    align-items: flex-end;
  }

  @include attr-module($bk-grid-name, #{$gf-value}#{"i:center"}) {
    align-items: center;
  }

  @include attr-module($bk-grid-name, #{$gf-value}#{"i:stretch"}) {
    align-items: stretch;
  }



  @include attr-module($bk-grid-name, #{$gf-value}#{"c:start"}) {
    align-content: flex-start;
  }

  @include attr-module($bk-grid-name, #{$gf-value}#{"c:end"}) {
    align-content: flex-end;
  }

  @include attr-module($bk-grid-name, #{$gf-value}#{"c:center"}) {
    align-content: center;
  }

  @include attr-module($bk-grid-name, #{$gf-value}#{"c:stretch"}) {
    align-content: stretch;
  }



  @include attr-module($bk-grid-name, #{$gf-value}#{"s:start"}) {
    align-self: flex-start;
  }

  @include attr-module($bk-grid-name, #{$gf-value}#{"s:end"}) {
    align-self: flex-end;
  }

  @include attr-module($bk-grid-name, #{$gf-value}#{"s:center"}) {
    align-self: center;
  }

  @include attr-module($bk-grid-name, #{$gf-value}#{"s:stretch"}) {
    align-self: stretch;
  }



  @include attr-module($bk-grid-name, #{$gf-value}#{"start"}) {
    order: -1;
  }

  @include attr-module($bk-grid-name, #{$gf-value}#{"end"}) {
    order: 99;
  }

  @include attr-module($bk-grid-name, #{$gf-value}#{"grow"}) {
    flex-grow: 1;
  }

  @include attr-module($bk-grid-name, #{$gf-value}#{"fill"}) {
    flex-grow: 2;
  }

  @include attr-module($bk-grid-name, #{$gf-value}#{"shrink"}) {
    flex-shrink: 0;
  }
}



/// Generate grid columns.
///
/// @todo EVERYTHING
/// @access private
@mixin grid-columns($gw-value: null) {
  // Auto will shrink to the width of the content, default however is 100% width
  @include attr-module($bk-grid-name, #{$gw-value}auto) {
    width: auto;
  }

  // Loop through the number of columns defined in the settings and output the appropriate width in %
  @for $i from 1 through $grid-columns {
    @include attr-module($bk-grid-name, #{$gw-value}#{$i}) {
      width: 100% / ($grid-columns / $i);
    }
  }
}


/// Grid column indentation.
/// Indent content in numbers of columns (up to -1 of the total columns).
///
/// @todo EVERYTHING
/// @access private
@mixin grid-indent($gw-value: null) {
  // PUSH COLUMN TO THE RIGHT (from the left side)
  @if $bk-push-right {
    @for $i from 1 through $bk-push-columns {
      @include attr-module($bk-grid-name, #{$gw-value}#{"pr:"}#{$i}) {
        margin-left: 100% / ($grid-columns / $i);
      }
    }
  }
  // PUSH COLUMN TO THE LEFT (from the right side)
  @if $bk-push-left {
    @for $i from 1 through $bk-push-columns {
      @include attr-module($bk-grid-name, #{$gw-value}#{"pl:"}#{$i}) {
        margin-right: 100% / ($grid-columns / $i);
      }
    }
  }
}


/// Grid column padding (margins/gutters).
///
/// @access private
@mixin grid-padding($gg-value: null) {
  // Reduce the gutte size on the module
  @include attr-module($bk-grid-name, #{$gg-value}#{"p:sm"}) {
    padding: ($bk-grid-padding-small / 16) * 1rem;
  }

  @include attr-module($bk-grid-name, #{$gg-value}#{"p:lg"}) {
    padding: ($bk-grid-padding-large / 16) * 1rem;
  }

  // Disable padding completely on the module
  @include attr-module($bk-grid-name, #{$gg-value}#{"p:0"}) {
    padding: 0;
  }



  // Top-Right-Bottom
  @include attr-module($bk-grid-name, #{$gg-value}#{"p:trb"}) {
    padding: { left: 0; };
  }
  // Top-Bottom-Left
  @include attr-module($bk-grid-name, #{$gg-value}#{"p:tbl"}) {
    padding: { right: 0; };
  }
  // Top-Right-Left
  @include attr-module($bk-grid-name, #{$gg-value}#{"p:trl"}) {
    padding: { bottom: 0; };
  }

  // Top
  @include attr-module($bk-grid-name, #{$gg-value}#{"p:t"}) {
    padding: { right: 0; bottom: 0; left: 0; };
  }
  // Top-Right
  @include attr-module($bk-grid-name, #{$gg-value}#{"p:tr"}) {
    padding: { bottom: 0; left: 0; };
  }
  // Right
  @include attr-module($bk-grid-name, #{$gg-value}#{"p:r"}) {
    padding: { top: 0; bottom: 0; left: 0; };
  }
  // Right-Bottom-Left
  @include attr-module($bk-grid-name, #{$gg-value}#{"p:rbl"}) {
    padding: { top: 0; };
  }

  // Bottom
  @include attr-module($bk-grid-name, #{$gg-value}#{"p:b"}) {
    padding: { top: 0; right: 0; left: 0; };
  }
  // Horizontal: Top-Bottom
  @include attr-module($bk-grid-name, #{$gg-value}#{"p:tb"}) {
    padding: { right: 0; left: 0; };
  }
  // Right-Bottom
  @include attr-module($bk-grid-name, #{$gg-value}#{"p:rb"}) {
    padding: { top: 0; left: 0; };
  }

  // Left
  @include attr-module($bk-grid-name, #{$gg-value}#{"p:l"}) {
    padding: { top: 0; right: 0; bottom: 0; };
  }
  // Right-Left
  @include attr-module($bk-grid-name, #{$gg-value}#{"p:rl"}) {
    padding: { top: 0; bottom: 0; };
  }
  // Top-Left
  @include attr-module($bk-grid-name, #{$gg-value}#{"p:tl"}) {
    padding: { right: 0; bottom: 0; };
  }

  // Bottom-Left
  @include attr-module($bk-grid-name, #{$gg-value}#{"p:bl"}) {
    padding: { top: 0; right: 0; };
  }
}


// Output the default element at 100% width
// And reduce the default padding
@include attr-module($bk-grid-name) {
  width: 100%;
  // display: inline-block;
  // vertical-align: top;
  // padding: (($margin / 2) / 16) * 1rem;
  padding: ($margin / 16) * 1rem;


  // Increase the padding size
  // @include mq(sm) {
  //   padding: ($margin / 16) * 1rem;
  // }
}

// Output the _base_ set of properties (mobile first, no MQ)
@include grid-flex;
@include grid-columns;
@include grid-padding;
@include grid-indent;
// @include grid-alignments;

// Iterate through the media queries and output properties for each without the base props
@each $breakpoint, $gw-value in $mq-breakpoints {
  // @if $gw-value != null {
    @include mq($breakpoint) {
      @include grid-flex("#{$breakpoint}:");
      @include grid-columns("#{$breakpoint}:");
      @include grid-padding("#{$breakpoint}:");
      @include grid-indent("#{$breakpoint}:");
      // @include grid-alignments("#{$breakpoint}:");
    }
  // }
}

// Same as above but instead of `from` this one is up `to` without the base props
@if $bk-grid-mq-to {
  @each $breakpoint, $gw-value in reverse($mq-breakpoints) {
    // @if $gw-value != null {
      @include mq($until: $breakpoint) {
        @include grid-flex("to:#{$breakpoint}:");
        @include grid-columns("to:#{$breakpoint}:");
        @include grid-padding("to:#{$breakpoint}:");
        @include grid-indent("to:#{$breakpoint}:");
        // @include grid-alignments("to:#{$breakpoint}:");
      }
    // }
  }
}
